<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[我一直不理解 JavaScript 的闭包是什么]]></title>
      <url>/2018/08/29/%E6%88%91%E4%B8%80%E7%9B%B4%E4%B8%8D%E7%90%86%E8%A7%A3%20JavaScript%20%E7%9A%84%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>我一直不理解 JavaScript 的闭包是什么<br>直到有人这样向我解释……</p>
<blockquote>
<p>原文:<br><a href="https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8" target="_blank" rel="noopener">https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8</a></p>
</blockquote>
<p><code>施工未完成, 有空再填坑</code><br><a id="more"></a></p>
<p>正如标题所述，JavaScript 的闭包对我来说一直是个谜一样的存在。我看过很多篇讲闭包的文章，也在工作中用过闭包，有时甚至在我没有意识到到的情况下使用了闭包.即使这样我还是不太明白 JavaScript 的闭包是什么.</p>
<p>最近我去了一个演讲，终于有人让我明白了什么是闭包。我会尝试用这种方法来解释本文中的闭包。让我们赞扬 CodeSmith 的优秀人才和他们的 JavaScript The Hard Parts 系列。</p>
<h1 id="在开始之前"><a href="#在开始之前" class="headerlink" title="在开始之前"></a>在开始之前</h1><p>在你开始理解闭包之前，有些很重要的概念需要讲一下。其中之一是 执行上下文(execution context)。</p>
<p><a href="http://davidshariff.com/blog/what-is-the-execution-context-in-javascript/" target="_blank" rel="noopener">这是一篇很好对执行上下文入门的文章。</a>引用这篇文章：</p>
<blockquote>
<p>在运行 JavaScript 代码时，它的执行上下文非常重要，并被判断为以下的其中一个：<br>全局代码  - 首次执行代码的默认环境。<br>功能代码  - 每当执行流程进入函数体时。<br>（……）<br>（…），让我们将该术语 <code>execution context</code>视为正在解析当前代码的环境/范围。</p>
</blockquote>
<p>换句话说，当我们启动程序时，我们从 全局执行上下文(global execution context) 开始。一些变量在全局执行上下文中声明。我们称这些变量为全局变量。当程序调用函数时，会发生什么？几个步骤：</p>
<ol>
<li>JavaScript 创建一个新的执行上下文，一个 局部执行上下文(local execution context)</li>
<li>这个局部执行上下文将具有其自己的变量集，这些变量将是该执行上下文的局部变量。</li>
<li>新的执行上下文被抛到 执行堆栈(execution stack) 上。可以将执行堆栈视为一种机制，用于跟踪程序执行的位置</li>
</ol>
<p>什么时候函数会结束执行？当遇到 return 声明或遇到结束括号 } 时。函数结束时，会发生以下情况：</p>
<ol>
<li>局部执行上下文 从执行堆栈中弹出</li>
<li>函数将返回值发送回 调用上下文(calling context)。调用上下文是调用此函数的执行上下文，它可以是全局执行上下文或另一个局部执行上下文。由调用上下文来处理这个函数的返回值。返回的值可以是对象，数组，函数，布尔值，任何东西。如果函数没有return语句，则返回undefined。</li>
<li>局部执行上下文会被销毁。这里很重要。在局部执行上下文中声明的所有变量都将被删除。他们不再可用。这就是他们被称为局部变量的原因。</li>
</ol>
<h1 id="举一个非常基本的例子"><a href="#举一个非常基本的例子" class="headerlink" title="举一个非常基本的例子"></a>举一个非常基本的例子</h1><p>在我们开始理解闭包之前，让我们看一下下面这段代码。这个例子看起来非常简单，任何读这篇文章的人都可能知道它的作用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1：let a = 3 </span><br><span class="line">2：function addTwo（x）&#123; </span><br><span class="line">3：  let ret = x + 2 </span><br><span class="line">4：  return ret </span><br><span class="line">5：&#125; </span><br><span class="line">6：let b = addTwo（a）</span><br><span class="line">7：console.log（b）</span><br></pre></td></tr></table></figure></p>
<p>为了理解 JavaScript 真正工作原理，让我们详细介绍一下。</p>
<ol>
<li>在第1行我们在全局执行上下文中声明一个新变量 a，并为其分配数字 3。</li>
<li>接下来它变得有点复杂。第 2 到第 5 行被包含在一起。这里发生了什么？我们在全局执行上下文中声明了一个以 addTwo 命名的新变量。我们分配给它的是什么？函数定义。两个括号之间{ }的任何内容都分配给 addTwo。函数内部的代码不会被解析，也不会执行，只是存储到变量中以备将来使用。</li>
<li>所以现在我们来看看第6行。它看起来很简单，但在这里解析了很多。首先，我们在全局执行上下文中声明一个新变量并命名它为 b。声明变量后，它的值为undefined。</li>
<li>接下来仍然是第6行，我们看到一个赋值运算符 =。我们正准备为变量 b 分配一个新值。我们可以看到一个函数被调用。当你看到变量后跟圆括号时(…)就明白，这就是调用函数的信号。向前闪存( Flash forward ???)，每个函数都会返回一些东西（值，对象或undefined）。从函数返回的所有内容都会分配给变量 b。</li>
<li>但首先我们需要调用命名为 addTwo 的函数。JavaScript 将在其全局执行上下文内存中查找名为的变量 addTwo 。哦，它找到了一个，它在步骤2（或第2-5行）中定义。并且查看变量 addTwo 包含的函数定义。需要注意的是变量 a 作为参数传递给函数。JavaScript 在其全局执行上下文内存中搜索变量 a，找到它然后发现它的值是 3 并将该数字 3 作为参数传递给函数。然后准备执行该函数。</li>
<li>现在 执行上下文 将切换。创建一个新的 局部执行上下文 ，我们将其命名为“addTwo execution context”。 执行上下文 被推送到调用堆栈。我们在 局部执行上下文 中做的第一件事是什么？</li>
<li>您可能会想说，“ ret 在 局部执行上下文 中声明了一个新变量”。但是这不是答案。正确的答案是，我们首先需要查看函数的参数。x 在本地执行上下文中声明了一个新变量。并且由于该值 3 作为参数传递，因此变量 x 被赋予数字 3。</li>
<li>下一步是：ret 在 局部执行上下文 中声明一个新变量。其值设置为undefined。（第3行）</li>
<li>仍然是第3行，需要进行加法。首先，我们需要 x 的值。JavaScript 将查找变量 x。它将首先查看 局部执行上下文 。它找到了一个变量 x 的值是3。第二个操作数就是数字2。将 addition（5）的结果赋给变量ret。</li>
<li>第4行。我们返回变量的内容 ret. 局部执行上下文 中的另一个查找。ret 包含值 5。该函数返回数字 5。功能结束。</li>
<li>第4-5行。功能结束。 局部执行上下文 被销毁。变量 x 和 ret 被销毁。它们不再存在。上下文弹出调用堆栈，返回值返回到调用上下文。在这种情况下，调用上下文是全局执行上下文，因为该函数addTwo是从全局执行上下文调用的。</li>
<li>现在我们在步骤4中选择我们停止的位置。返回的值（数字5）将分配给变量b。我们仍然在小程序的第6行。<br>我不会详细介绍，但在第7行中，变量的内容b会在控制台中打印出来。在我们的例子中的数字5。<br>对于一个非常简单的程序来说，这是一个非常冗长的解释，我们甚至还没有涉及到闭包。我保证会讲到那里。但首先我们需要再绕一两次。</li>
</ol>
<h1 id="命名空间-lexical-scope"><a href="#命名空间-lexical-scope" class="headerlink" title="命名空间(lexical scope)"></a>命名空间(lexical scope)</h1><p>我们需要了解词法范围的某些方面。看一下下面的例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1：let val1 = 2 </span><br><span class="line">2：function multiplyThis（n）&#123; </span><br><span class="line">3：  let ret = n * val1 </span><br><span class="line">4：  return ret </span><br><span class="line">5：&#125; </span><br><span class="line">6：let multiplied = multiplyThis（6）</span><br><span class="line">7：console.log（&apos;example of scope：&apos; ，multiplied）</span><br></pre></td></tr></table></figure>
<p>这里的关注点是我们在 局部执行上下文 中有变量，在全局执行上下文中有变量。JavaScript 的一个复杂之处在于它如何查找变量。如果它在 局部执行上下文 中找不到变量，它将在其 调用上下文 中查找它。如果没有在其 调用上下文 中找到它。它会一直循环点查找, 直到它查看全局执行上下文。（如果它没有找到它，那就是undefined）。按照上面的例子，它将说明它。如果您了解空间(scope)的工作原理，则可以跳过此步骤。</p>
<ol>
<li>val1 在全局执行上下文中声明一个新变量并为其分配数字2。</li>
<li>第2-5行。声明一个新变量 multiplyThis 并为其分配一个函数定义。</li>
<li>第6行。multiplied 在全局执行上下文中声明一个新变量。</li>
<li>multiplyThis 从全局执行上下文内存中检索变量并将其作为函数执行。将数字 6 作为参数传递。</li>
<li>新函数调用 = 新 执行上下文 。创建新的 局部执行上下文 。</li>
<li>在 局部执行上下文 中，声明一个变量 n 并为其分配数字 6。</li>
<li>第3行。在 局部执行上下文 中，声明一个变量 ret。</li>
<li>第3行（续）。用两个操作数执行乘法运算; 变量的内容为 n 和 val1。n 在 局部执行上下文 中查找变量。我们在第6步中声明了它。它的内容是数字6。val1 在 局部执行上下文 中查找变量。 局部执行上下文 没有标记的变量 val1。然后我们来检查 调用上下文 。 调用上下文 是全局执行上下文。让我们 val1 在全局执行上下文中寻找。它在第一行中定义。值是数字2。</li>
<li>第3行（续）。将两个操作数相乘并将其分配给 ret 变量。6 * 2 = 12. ret 现在是12。</li>
<li>返回 ret 变量。 局部执行上下文 及其变量 ret 和 n 会被销毁 。变量val1 不会被销毁，因为它是全局执行上下文的一部分。</li>
<li>返回第6行。在 调用上下文 中，将数字12分配给multiplied 变量。</li>
<li>最后在第7行，我们 multiplied 在控制台中显示变量的值。<br>所以在这个例子中，我们需要记住一个函数可以访问在其 调用上下文 中定义的变量。这种现象的正式名称是命名空间(lexical scope)。</li>
</ol>
<h1 id="一个返回函数的函数"><a href="#一个返回函数的函数" class="headerlink" title="一个返回函数的函数"></a>一个返回函数的函数</h1><p>在第一个示例中，函数 addTwo 返回一个数字。要记住的是之前函数可以返回任何内容。现在让我们来看一个返回函数的函数示例，因为这对理解闭包很重要。以下是我们要分析的示例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 1: let val = 7</span><br><span class="line"> 2: function createAdder() &#123;</span><br><span class="line"> 3:   function addNumbers(a, b) &#123;</span><br><span class="line"> 4:     let ret = a + b</span><br><span class="line"> 5:     return ret</span><br><span class="line"> 6:   &#125;</span><br><span class="line"> 7:   return addNumbers</span><br><span class="line"> 8: &#125;</span><br><span class="line"> 9: let adder = createAdder()</span><br><span class="line">10: let sum = adder(val, 8)</span><br><span class="line">11: console.log(&apos;example of function returning a function: &apos;, sum)</span><br></pre></td></tr></table></figure>
<p>让我们回来进行逐步细分。<br><!------------------------------------------------------------------></p>
<ol>
<li>第1行。我们val在全局执行上下文中声明一个变量，并为该7变量赋值。</li>
<li>第2-8行。我们声明一个createAdder在全局执行上下文中命名的变量，并为其分配一个函数定义。第3至7行描述了所述功能定义。和以前一样，在这一点上，我们并没有跳进那个功能。我们只是将函数定义存储到该变量（createAdder）中。</li>
<li>第9行。我们adder在全局执行上下文中声明一个名为的新变量。暂时undefined分配给adder。</li>
<li>仍然是第9行。我们看到括号(); 我们需要执行或调用函数。让我们查询全局执行上下文的内存并查找名为的变量createAdder。它是在第2步创建的。好吧，我们来称呼它。</li>
<li>调用一个函数。现在我们在第2行。创建了一个新的本地执行上下文。我们可以在新的 执行上下文 中创建局部变量。引擎将新上下文添加到调用堆栈。该函数没有参数，让我们直接进入它的主体。</li>
<li>仍然是3-6行。我们有一个新的函数声明。我们addNumbers在本地执行上下文中创建一个变量。这很重要。addNumbers仅存在于本地执行上下文中。我们将函数定义存储在名为的局部变量中addNumbers。</li>
<li>现在我们在第7行。我们返回变量的内容addNumbers。引擎查找名为的变量addNumbers并找到它。这是一个功能定义。很好，一个函数可以返回任何东西，包括函数定义。所以我们返回的定义addNumbers。第4行和第5行的括号之间的任何内容构成了函数定义。我们还从调用堆栈中删除了本地执行上下文。</li>
<li>在return，本地执行上下文被销毁。该addNumbers变量是没有更多的。函数定义仍然存在，它从函数返回并分配给变量adder; 这是我们在第3步中创建的变量。</li>
<li>现在我们在第10行。我们sum在全局执行上下文中定义一个新变量。临时任务是undefined。</li>
<li>我们需要接下来执行一个函数。哪个功能？在名为的变量中定义的函数adder。我们在全局执行环境中查找它，我们确实找到了它。这是一个带两个参数的函数。</li>
<li>让我们检索两个参数，这样我们就可以调用函数并传递正确的参数。第一个是val我们在步骤1中定义的变量，它表示数字7，第二个是数字8。</li>
<li>现在我们必须执行该功能。功能定义概述为第3-5行。创建新的本地执行上下文。在本地上下文中，创建了两个新变量：a和b。它们分别被赋值，7并且8因为那些是我们在上一步中传递给函数的参数。</li>
<li>第4行ret。声明了一个名为的新变量。它在本地执行上下文中声明。<br>第4行。执行添加，我们在其中添加变量a的内容和变量的内容b。将addition（15）的结果赋给ret变量。</li>
<li>该ret变量从该函数返回。本地执行上下文被销毁，它从调用堆栈，变量中删除a，b并且ret不再存在。</li>
<li>返回的值将分配给sum我们在步骤9中定义的变量。</li>
<li>我们打印出sum控制台的值。<br>正如预期的那样，控制台将打印15.我们真的经历了一堆箍。我想在这里说明几点。首先，函数定义可以存储在变量中，函数定义对程序是不可见的，直到被调用。其次，每次调用函数时，（临时）创建本地执行上下文。当函数完成时， 执行上下文 消失。函数在遇到return或关闭括号时完成}。</li>
</ol>
<h1 id="最后，闭包"><a href="#最后，闭包" class="headerlink" title="最后，闭包"></a>最后，闭包</h1><p>看看下一个代码，并试着弄清楚会发生什么。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1：function createCounter（）&#123; </span><br><span class="line">2：let counter = 0 </span><br><span class="line">3：const myFunction = function（）&#123; </span><br><span class="line">4：counter = counter + 1 </span><br><span class="line">5：return counter </span><br><span class="line">6：&#125; </span><br><span class="line">7：return myFunction </span><br><span class="line">8：&#125; </span><br><span class="line">9：const increment = createCounter（）</span><br><span class="line">10：const c1 = increment（）</span><br><span class="line">11：const c2 = increment（）</span><br><span class="line">12：const c3 = increment（）</span><br><span class="line">13：console.log（&apos;example increment&apos;，c1，c2，c3）</span><br></pre></td></tr></table></figure></p>
<p>现在我们从之前的两个例子中得到了它，让我们按照我们期望它运行的方式执行此操作。</p>
<ol>
<li>第1-8行。我们createCounter在全局执行上下文中创建一个新变量，并获得已分配的函数定义。</li>
<li>第9行。我们声明一个increment在全局执行上下文中命名的新变量。</li>
<li>第9行。我们需要调用createCounter函数并将其返回值increment赋给变量。</li>
<li>第1-8行。调用函数。创建新的本地执行上下文。</li>
<li>第2行。在本地执行上下文中，声明一个名为的新变量counter。编号0分配给counter。</li>
<li>3-6行。声明名为的新变量myFunction。该变量在本地执行上下文中声明。变量的内容是另一个函数定义。如第4和第5行所定义。</li>
<li>第7行。返回myFunction变量的内容。删除本地执行上下文。myFunction并且counter不再存在。控制返回到调用上下文。</li>
<li>第9行。在调用上下文中，全局执行上下文，返回的值createCounter被赋值给increment。变量增量现在包含一个函数定义。返回的函数定义createCounter。它不再被标记myFunction，但它的定义相同。在全球范围内，它被标记increment。</li>
<li>第10行。声明一个新变量（c1）。</li>
<li>第10行（续）。查找变量increment，它是一个函数，调用它。它包含从前面返回的函数定义，如第4-5行中所定义。</li>
<li>创建一个新的 执行上下文 。没有参数。开始执行该功能。</li>
<li>第4行counter = counter + 1。counter在本地执行上下文中查找值。我们刚刚创建了上下文，并且从不声明任何局部变量。让我们看看全局执行上下文。counter此处没有标记变量。Javascript会将其评估为counter = undefined + 1，声明一个标记的新局部变量counter并为其分配数字1，就像undefined它的类型一样0。</li>
<li>第5行。我们返回内容counter或数字1。我们销毁本地执行上下文和counter变量。</li>
<li>返回第10行。返回的值（1）被赋值给c1。</li>
<li>第11行。我们重复步骤10-14，也c2被分配1。</li>
<li>第12行。我们重复步骤10-14，也c3被分配1。</li>
<li>第13行。我们记录变量的内容c1，c2和c3。</li>
<li>亲自尝试一下，看看会发生什么。您会注意到它没有记录1，1并且1正如您在上面的解释中所期望的那样。相反，它是记录1，2和3。什么赋予了什么？</li>
</ol>
<p>不知何故，增量函数会记住该counter 值。那怎么样？</p>
<p>是counter 全球执行环境的一部分吗？试试吧console.log(counter)，你会得到的undefined。所以那不是它。</p>
<p>也许，当你打电话时increment，它会以某种方式回到创建它的函数（createCounter）？怎么会这样呢？变量increment包含函数定义，而不是它来自何处。所以那不是它。</p>
<p>所以必须有另一种机制。关闭。我们终于得到了它，失踪的一块。</p>
<p>下面是它的工作原理。每当声明一个新函数并将其赋值给变量时，都会存储函数定义以及闭包。闭包包含创建函数时范围内的所有变量。它类似于背包。功能定义附带一个小背包。在它的包中，它存储了创建函数定义时范围内的所有变量。</p>
<p>所以我们上面的解释都是错误的，让我们再试一次，但这次是正确的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1：function createCounter（）&#123; </span><br><span class="line">2：let counter = 0 </span><br><span class="line">3：const myFunction = function（）&#123; </span><br><span class="line">4：counter = counter + 1 </span><br><span class="line">5：return counter </span><br><span class="line">6：&#125; </span><br><span class="line">7：return myFunction </span><br><span class="line">8：&#125; </span><br><span class="line">9：const increment = createCounter（）</span><br><span class="line">10：const c1 = increment（）</span><br><span class="line">11：const c2 = increment（）</span><br><span class="line">12：const c3 = increment（）</span><br><span class="line">13：console.log（&apos;example increment&apos;，c1，c2，c3）</span><br></pre></td></tr></table></figure></p>
<ol>
<li>第1-8行。我们createCounter在全局执行上下文中创建一个新变量，并获得已分配的函数定义。与上面相同。</li>
<li>第9行。我们声明一个increment在全局执行上下文中命名的新变量。与上面相同。</li>
<li>第9行。我们需要调用createCounter函数并将其返回值increment赋给变量。与上面相同。</li>
<li>第1-8行。调用函数。创建新的本地执行上下文。与上面相同。</li>
<li>第2行。在本地执行上下文中，声明一个名为的新变量counter。编号0分配给counter。与上面相同。</li>
<li>3-6行。声明名为的新变量myFunction。该变量在本地执行上下文中声明。变量的内容是另一个函数定义。如第4行和第5行所定义。现在我们还创建一个闭包并将其作为函数定义的一部分包含在内。闭包含包含范围内的变量，在本例中为变量counter（值为0）。</li>
<li>第7行。返回myFunction变量的内容。删除本地执行上下文。myFunction并且counter不再存在。控制返回到调用上下文。所以我们返回函数定义及其闭包，背包中包含创建时范围内的变量。</li>
<li>第9行。在调用上下文中，全局执行上下文，返回的值createCounter被赋值给increment。变量增量现在包含一个函数定义（和闭包）。返回的函数定义createCounter。它不再被标记myFunction，但它的定义相同。在全球范围内，它被称为increment。</li>
<li>第10行。声明一个新变量（c1）。</li>
<li>第10行（续）。查找变量increment，它是一个函数，调用它。它包含从前面返回的函数定义，如第4-5行中所定义。（还有一个带变量的背包）</li>
<li>创建一个新的 执行上下文 。没有参数。开始执行该功能。</li>
<li>第4行counter = counter + 1。我们需要寻找变量counter。在我们查看本地或全局执行环境之前，让我们看看我们的背包。我们来检查关闭。瞧，闭包含一个名为的变量counter，其值为0。在第4行表达式之后，其值设置为1。它再次存放在背包里。闭包现在包含counter值为的变量1。</li>
<li>第5行。我们返回内容counter或数字1。我们破坏了本地执行上下文。</li>
<li>返回第10行。返回的值（1）被赋值给c1。</li>
<li>第11行。我们重复步骤10-14。这次，当我们查看闭包时，我们看到counter变量的值为1.它是在程序的第12步或第4行中设置的。它的值递增并存储2在增量函数的闭包中。并c2获得分配2。</li>
<li>第12行。我们重复步骤10-14，c3分配3。</li>
<li>第13行。我们记录变量的内容c1，c2和c3。</li>
<li>所以现在我们了解这是如何工作的。要记住的关键是当声明一个函数时，它包含一个函数定义和一个闭包。闭包是函数创建时范围内所有变量的集合。</li>
</ol>
<p>您可能会问，任何函数是否都有闭包，甚至是在全局范围内创建的函数？答案是肯定的。在全局范围中创建的函数会创建一个闭包。但由于这些函数是在全局范围内创建的，因此它们可以访问全局范围内的所有变量。封闭概念并不真正相关。</p>
<p>当函数返回一个函数时，就是闭包的概念变得更加相关。返回的函数可以访问不在全局范围内的变量，但它们仅存在于其闭包中。</p>
<p>不是那么微不足道的关闭<br>当你甚至没有注意到它时，有时会出现关闭。您可能已经看到了我们称之为部分应用程序的示例。如下面的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set c = 4 </span><br><span class="line">const addX = x =&gt; n =&gt; n + x </span><br><span class="line">const addThree = addX（3）</span><br><span class="line">let d = addThree（c）</span><br><span class="line">console.log（&apos;example partial application&apos;，d）</span><br></pre></td></tr></table></figure></p>
<p>如果箭头函数抛出你，这是等效的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let c = 4 </span><br><span class="line">function addX（x）&#123; </span><br><span class="line">  return function（n）&#123; </span><br><span class="line">     return n + x </span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br><span class="line">const addThree = addX（3）</span><br><span class="line">let d = addThree（c）</span><br><span class="line">console.log（&apos;example partial application&apos;，d）</span><br><span class="line">我们声明了一个通用加法器函数addX，它接受一个参数（x）并返回另一个函数。</span><br></pre></td></tr></table></figure></p>
<p>返回的函数也接受一个参数并将其添加到变量中x。</p>
<p>变量x是闭包的一部分。当变量addThree在本地上下文中声明时，它被赋予一个函数定义和一个闭包。闭包包含变量x。</p>
<p>所以现在当addThree调用并执行它时，它可以x从其闭包中获取变量，并且该变量n作为参数传递并且能够返回总和。</p>
<p>在此示例中，控制台将打印该号码7。</p>
<p>结论<br>我永远记得关闭的方式是通过背包类比。当一个函数被创建并传递或从另一个函数返回时，它带有一个背包。并且在背包中是声明函数时范围内的所有变量。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[ElasticSearch 修改 mapping]]></title>
      <url>/2018/08/28/ElasticSearch%20%E4%BF%AE%E6%94%B9%20mapping/</url>
      <content type="html"><![CDATA[<p><a href="https://www.elastic.co/blog/logstash_lesson_elasticsearch_mapping" target="_blank" rel="noopener">https://www.elastic.co/blog/logstash_lesson_elasticsearch_mapping</a></p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST imore-2018.07.25/doc/_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;&quot;match_all&quot;: &#123;&#125;&#125;,</span><br><span class="line"> &quot;aggs&quot;: &#123;</span><br><span class="line">   &quot;e_terms&quot;: &#123;</span><br><span class="line">     &quot;terms&quot;: &#123;&quot;field&quot;: &quot;e.keyword&quot;&#125;,</span><br><span class="line">     &quot;aggs&quot;: &#123;</span><br><span class="line">       &quot;f_terms&quot;: &#123;</span><br><span class="line">         &quot;terms&quot;: &#123;&quot;field&quot;: &quot;f.keyword&quot;&#125;,</span><br><span class="line">         &quot;aggs&quot;: &#123;</span><br><span class="line">           &quot;g_terms&quot;: &#123;</span><br><span class="line">             &quot;terms&quot;: &#123;&quot;field&quot;: &quot;g.keyword&quot;&#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;  </span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> ELK </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ELK </tag>
            
            <tag> ElasticSsearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cluster_block_exception]]></title>
      <url>/2018/08/26/cluster-block-exception/</url>
      <content type="html"><![CDATA[<p>在导入数据的时候遇见了一个错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">retrying failed action with response code: 403 (&#123;&quot;type&quot;=&gt;&quot;cluster_block_exception&quot;, &quot;reason&quot;=&gt;&quot;blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];&quot;&#125;)</span><br></pre></td></tr></table></figure></p>
<p>这是因为 <code>read_only_allow_delete: false</code> 被设置为 true 了, 只要把它设置回 false 就会继续导入数据.<br>但是, 需要去查看设置为 true 的原因. 因为在硬盘占用达到 95% 的时候会自动设置为 true.<br>这个时候如果设置回 false 过一段时间, 它也会设值为 true. 需要用户清除数据或者扩大硬盘大小才能继续.</p>
]]></content>
      
        <categories>
            
            <category> ELK </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[硬盘使用情况查看]]></title>
      <url>/2018/07/26/%E7%A1%AC%E7%9B%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%E6%9F%A5%E7%9C%8B/</url>
      <content type="html"><![CDATA[<p>df命令是linux系统以磁盘分区为单位查看文件系统，可以加上参数查看磁盘剩余空间信息，命令格式：<br>df -hl<br>显示格式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">文件系统 容量 已用 可用 已用% 挂载点</span><br><span class="line">Filesystem Size Used Avail Use% Mounted on</span><br><span class="line">/dev/hda2 45G 19G 24G 44% /</span><br><span class="line">/dev/hda1 494M 19M 450M 4% /boot</span><br><span class="line">/dev/hda6 4.9G 2.2G 2.5G 47% /home</span><br><span class="line">/dev/hda5 9.7G 2.9G 6.4G 31% /opt</span><br><span class="line">none 1009M 0 1009M 0% /dev/shm</span><br><span class="line">/dev/hda3 9.7G 7.2G 2.1G 78% /usr/local</span><br><span class="line">/dev/hdb2 75G 75G 0 100% /</span><br><span class="line">/dev/hdb2 75G 75G 0 100% /</span><br></pre></td></tr></table></figure></p>
<p>以上面的输出为例，表示的意思为：</p>
<p>HD硬盘接口的第二个硬盘（b），第二个分区（2），容量是75G，用了75G，可用是0，因此利用率是100%， 被挂载到根分区目录上（/）。</p>
<p>下面是相关命令的解释：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df -hl 查看磁盘剩余空间</span><br><span class="line">df -h 查看每个根路径的分区大小</span><br><span class="line">du -sh [目录名] 返回该目录的大小</span><br><span class="line">du -sm [文件夹] 返回该文件夹总M数</span><br></pre></td></tr></table></figure></p>
<p>更多功能可以输入一下命令查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df --help</span><br><span class="line">du --help</span><br></pre></td></tr></table></figure></p>
<p>查看linux文件目录的大小和文件夹包含的文件数</p>
<p>统计总数大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">du -sh xmldb/</span><br><span class="line">du -sm * | sort -n //统计当前目录大小 并安大小 排序</span><br><span class="line">du -sk * | sort -n</span><br><span class="line">du -sk * | grep guojf //看一个人的大小</span><br><span class="line">du -m | cut -d &quot;/&quot; -f 2 //看第二个/ 字符前的文字</span><br></pre></td></tr></table></figure></p>
<p>查看此文件夹有多少文件 /<em>/</em>/* 有多少文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">du xmldb/</span><br><span class="line">du xmldb/*/*/* |wc -l</span><br><span class="line">40752</span><br></pre></td></tr></table></figure></p>
<p>解释：<br>wc [-lmw]<br>参数说明：-l :多少行；-m:多少字符；-w:多少字<br>两个命令df 、du结合比较直观<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df    -h                     查看整台服务器的硬盘使用情况</span><br><span class="line">cd    /                       进入根目录</span><br><span class="line">du   -sh    *              查看每个文件夹的大小</span><br></pre></td></tr></table></figure></p>
<p>这样的组合可以快速定位大文件和分区满了</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ELK: ELK 配置]]></title>
      <url>/2018/07/24/ELK-ELK-%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="Elasticsearch-配置"><a href="#Elasticsearch-配置" class="headerlink" title="Elasticsearch 配置"></a>Elasticsearch 配置</h1><p>Elasticsearch 配置文件在 elasticsearch/config 文件夹下. 这个文件夹有两个配置文件 elasticsearch.yml 是配置不同模块的配置文件, logging.yml 是配置日志的配置文件.</p>
<p>docker 映射配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/opt/kibana/config/kibana.yml    # kibana 的配置文件</span><br><span class="line">/opt/logstash/config/logstash.yml    # logstash 的配置文件</span><br><span class="line">/opt/elasticsearch/config/elasticsearch.yml    # es 的配置文件</span><br><span class="line">/usr/share/elasticsearch/data    # es 存储数据的位置</span><br><span class="line">  </span><br><span class="line">docker run -p 8001:5601 -p 8002:9200 -p 8003:9300 -p 8004:5044 \</span><br><span class="line">  -v /data/elk/logstash/conf.d:/etc/logstash/conf.d \</span><br><span class="line">  -v /data/elk/kibana/config/kibana.yml:/opt/kibana/config/kibana.yml \</span><br><span class="line">  -v /data/elk/logstash/config/logstash.yml:/opt/logstash/config/logstash.yml \</span><br><span class="line">  -v /data/elk/elasticsearch/config/elasticsearch.yml:/opt/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">  -v /data/elk/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">  -v /data/elk/elasticsearch/log/:/var/lib/elasticsearch \</span><br><span class="line">  -v /data/elk/kibana/run_log/:/var/log/kibana/ \</span><br><span class="line">  -v /data/elk/logstash/run_log/:/var/log/logstash/ \</span><br><span class="line">  -v /data/elk/elasticsearch/run_log/:/var/log/elasticsearch/ \</span><br><span class="line">  -it --name elk sebp/elk</span><br></pre></td></tr></table></figure></p>
<h1 id="LogStash-配置"><a href="#LogStash-配置" class="headerlink" title="LogStash 配置"></a>LogStash 配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">    ssl =&gt; true</span><br><span class="line">    ssl_certificate =&gt; &quot;/etc/pki/tls/certs/logstash-beats.crt&quot;</span><br><span class="line">    ssl_key =&gt; &quot;/etc/pki/tls/private/logstash-beats.key&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">      match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;SYSLOGTIMESTAMP:syslog_timestamp&#125; %&#123;SYSLOGHOST:syslog_hostname&#125; %&#123;DATA:syslog_program&#125;(?:\[%&#123;POSINT:syslog_pid&#125;\])?: %&#123;GREEDYDATA:syslog_message&#125;&quot; &#125;</span><br><span class="line">      add_field =&gt; [ &quot;received_at&quot;, &quot;%&#123;@timestamp&#125;&quot; ]</span><br><span class="line">      add_field =&gt; [ &quot;received_from&quot;, &quot;%&#123;host&#125;&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">    syslog_pri &#123; &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">      match =&gt; [ &quot;syslog_timestamp&quot;, &quot;MMM  d HH:mm:ss&quot;, &quot;MMM dd HH:mm:ss&quot; ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">      match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;NGINXACCESS&#125;&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">        json &#123;</span><br><span class="line">            source =&gt; &quot;message&quot;</span><br><span class="line">            #target =&gt; &quot;doc&quot;</span><br><span class="line">            #remove_field =&gt; [&quot;message&quot;]</span><br><span class="line">        &#125;   </span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;localhost&quot;]</span><br><span class="line">    manage_template =&gt; false</span><br><span class="line">    index =&gt; &quot;%&#123;[@metadata][beat]&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    document_type =&gt; &quot;%&#123;[@metadata][type]&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="其他示例配置"><a href="#其他示例配置" class="headerlink" title="其他示例配置"></a>其他示例配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"># ======================== Elasticsearch Configuration =========================</span><br><span class="line">#</span><br><span class="line"># NOTE: Elasticsearch comes with reasonable defaults for most settings.</span><br><span class="line">#       Before you set out to tweak and tune the configuration, make sure you</span><br><span class="line">#       understand what are you trying to accomplish and the consequences.</span><br><span class="line">#</span><br><span class="line"># The primary way of configuring a node is via this file. This template lists</span><br><span class="line"># the most important settings you may want to configure for a production cluster.</span><br><span class="line">#</span><br><span class="line"># Please consult the documentation for further information on configuration options:</span><br><span class="line"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span><br><span class="line">#</span><br><span class="line"># ---------------------------------- Cluster -----------------------------------</span><br><span class="line">#</span><br><span class="line"># Use a descriptive name for your cluster:</span><br><span class="line">#</span><br><span class="line"># cluster.name: aoemo</span><br><span class="line">#</span><br><span class="line"># ------------------------------------ Node ------------------------------------</span><br><span class="line">#</span><br><span class="line"># Use a descriptive name for the node:</span><br><span class="line">#</span><br><span class="line"># node.name: node-1</span><br><span class="line">#</span><br><span class="line"># Add custom attributes to the node:</span><br><span class="line">#</span><br><span class="line">#node.attr.rack: r1</span><br><span class="line">#</span><br><span class="line"># ----------------------------------- Paths ------------------------------------</span><br><span class="line">#</span><br><span class="line"># Path to directory where to store the data (separate multiple locations by comma):</span><br><span class="line">#</span><br><span class="line">path.data: /usr/share/elasticsearch/data</span><br><span class="line">#</span><br><span class="line"># Path to log files:</span><br><span class="line">#</span><br><span class="line">path.logs: /var/lib/elasticsearch</span><br><span class="line">#</span><br><span class="line"># ----------------------------------- Memory -----------------------------------</span><br><span class="line">#</span><br><span class="line"># Lock the memory on startup:</span><br><span class="line">#</span><br><span class="line">#bootstrap.memory_lock: true</span><br><span class="line">#</span><br><span class="line"># Make sure that the heap size is set to about half the memory available</span><br><span class="line"># on the system and that the owner of the process is allowed to use this</span><br><span class="line"># limit.</span><br><span class="line">#</span><br><span class="line"># Elasticsearch performs poorly when the system is swapping the memory.</span><br><span class="line">#</span><br><span class="line"># ---------------------------------- Network -----------------------------------</span><br><span class="line">#</span><br><span class="line"># Set the bind address to a specific IP (IPv4 or IPv6):</span><br><span class="line">#</span><br><span class="line">#network.host: 192.168.0.1</span><br><span class="line">#</span><br><span class="line"># Set a custom port for HTTP:</span><br><span class="line">#</span><br><span class="line">#http.port: 9200</span><br><span class="line">#</span><br><span class="line"># For more information, consult the network module documentation.</span><br><span class="line">#</span><br><span class="line"># --------------------------------- Discovery ----------------------------------</span><br><span class="line">#</span><br><span class="line"># Pass an initial list of hosts to perform discovery when new node is started:</span><br><span class="line"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span><br><span class="line">#</span><br><span class="line">#discovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2&quot;]</span><br><span class="line">#</span><br><span class="line"># Prevent the &quot;split brain&quot; by configuring the majority of nodes (total number of master-eligible nodes / 2 + 1):</span><br><span class="line">#</span><br><span class="line">#discovery.zen.minimum_master_nodes:</span><br><span class="line">#</span><br><span class="line"># For more information, consult the zen discovery module documentation.</span><br><span class="line">#</span><br><span class="line"># ---------------------------------- Gateway -----------------------------------</span><br><span class="line">#</span><br><span class="line"># Block initial recovery after a full cluster restart until N nodes are started:</span><br><span class="line">#</span><br><span class="line">#gateway.recover_after_nodes: 3</span><br><span class="line">#</span><br><span class="line"># For more information, consult the gateway module documentation.</span><br><span class="line">#</span><br><span class="line"># ---------------------------------- Various -----------------------------------</span><br><span class="line">#</span><br><span class="line"># Require explicit names when deleting indices:</span><br><span class="line">#</span><br><span class="line">#action.destructive_requires_name: true</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"># Default Kibana 5 file from https://github.com/elastic/kibana/blob/master/config/kibana.yml</span><br><span class="line">#</span><br><span class="line"># Kibana is served by a back end server. This setting specifies the port to use.</span><br><span class="line">#server.port: 5601</span><br><span class="line"></span><br><span class="line"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span><br><span class="line"># The default is &apos;localhost&apos;, which usually means remote machines will not be able to connect.</span><br><span class="line"># To allow connections from remote users, set this parameter to a non-loopback address.</span><br><span class="line">server.host: &quot;0.0.0.0&quot;</span><br><span class="line"></span><br><span class="line"># Enables you to specify a path to mount Kibana at if you are running behind a proxy. This only affects</span><br><span class="line"># the URLs generated by Kibana, your proxy is expected to remove the basePath value before forwarding requests</span><br><span class="line"># to Kibana. This setting cannot end in a slash.</span><br><span class="line">#server.basePath: &quot;&quot;</span><br><span class="line"></span><br><span class="line"># The maximum payload size in bytes for incoming server requests.</span><br><span class="line">#server.maxPayloadBytes: 1048576</span><br><span class="line"></span><br><span class="line"># The Kibana server&apos;s name.  This is used for display purposes.</span><br><span class="line">#server.name: &quot;your-hostname&quot;</span><br><span class="line"></span><br><span class="line"># The URL of the Elasticsearch instance to use for all your queries.</span><br><span class="line">#elasticsearch.url: &quot;http://localhost:9200&quot;</span><br><span class="line"></span><br><span class="line"># When this setting’s value is true Kibana uses the hostname specified in the server.host</span><br><span class="line"># setting. When the value of this setting is false, Kibana uses the hostname of the host</span><br><span class="line"># that connects to this Kibana instance.</span><br><span class="line">#elasticsearch.preserveHost: true</span><br><span class="line"></span><br><span class="line"># Kibana uses an index in Elasticsearch to store saved searches, visualizations and</span><br><span class="line"># dashboards. Kibana creates a new index if the index doesn’t already exist.</span><br><span class="line">#kibana.index: &quot;.kibana&quot;</span><br><span class="line"></span><br><span class="line"># The default application to load.</span><br><span class="line">#kibana.defaultAppId: &quot;discover&quot;</span><br><span class="line"></span><br><span class="line"># If your Elasticsearch is protected with basic authentication, these settings provide</span><br><span class="line"># the username and password that the Kibana server uses to perform maintenance on the Kibana</span><br><span class="line"># index at startup. Your Kibana users still need to authenticate with Elasticsearch, which</span><br><span class="line"># is proxied through the Kibana server.</span><br><span class="line">elasticsearch.username: &quot;elastic&quot;</span><br><span class="line">elasticsearch.password: &quot;changeme&quot;</span><br><span class="line"></span><br><span class="line"># Paths to the PEM-format SSL certificate and SSL key files, respectively. These</span><br><span class="line"># files enable SSL for outgoing requests from the Kibana server to the browser.</span><br><span class="line">#server.ssl.cert: /path/to/your/server.crt</span><br><span class="line">#server.ssl.key: /path/to/your/server.key</span><br><span class="line"></span><br><span class="line"># Optional settings that provide the paths to the PEM-format SSL certificate and key files.</span><br><span class="line"># These files validate that your Elasticsearch backend uses the same key files.</span><br><span class="line">#elasticsearch.ssl.cert: /path/to/your/client.crt</span><br><span class="line">#elasticsearch.ssl.key: /path/to/your/client.key</span><br><span class="line"></span><br><span class="line"># Optional setting that enables you to specify a path to the PEM file for the certificate</span><br><span class="line"># authority for your Elasticsearch instance.</span><br><span class="line">#elasticsearch.ssl.ca: /path/to/your/CA.pem</span><br><span class="line"></span><br><span class="line"># To disregard the validity of SSL certificates, change this setting’s value to false.</span><br><span class="line">#elasticsearch.ssl.verify: true</span><br><span class="line"></span><br><span class="line"># Time in milliseconds to wait for Elasticsearch to respond to pings. Defaults to the value of</span><br><span class="line"># the elasticsearch.requestTimeout setting.</span><br><span class="line">#elasticsearch.pingTimeout: 1500</span><br><span class="line"></span><br><span class="line"># Time in milliseconds to wait for responses from the back end or Elasticsearch. This value</span><br><span class="line"># must be a positive integer.</span><br><span class="line">#elasticsearch.requestTimeout: 30000</span><br><span class="line"></span><br><span class="line"># List of Kibana client-side headers to send to Elasticsearch. To send *no* client-side</span><br><span class="line"># headers, set this value to [] (an empty list).</span><br><span class="line">#elasticsearch.requestHeadersWhitelist: [ authorization ]</span><br><span class="line"></span><br><span class="line"># Header names and values that are sent to Elasticsearch. Any custom headers cannot be overwritten</span><br><span class="line"># by client-side headers, regardless of the elasticsearch.requestHeadersWhitelist configuration.</span><br><span class="line">#elasticsearch.customHeaders: &#123;&#125;</span><br><span class="line"></span><br><span class="line"># Time in milliseconds for Elasticsearch to wait for responses from shards. Set to 0 to disable.</span><br><span class="line">#elasticsearch.shardTimeout: 0</span><br><span class="line"></span><br><span class="line"># Time in milliseconds to wait for Elasticsearch at Kibana startup before retrying.</span><br><span class="line">#elasticsearch.startupTimeout: 5000</span><br><span class="line"></span><br><span class="line"># Specifies the path where Kibana creates the process ID file.</span><br><span class="line">#pid.file: /var/run/kibana.pid</span><br><span class="line"></span><br><span class="line"># Enables you specify a file where Kibana stores log output.</span><br><span class="line">#logging.dest: stdout</span><br><span class="line"></span><br><span class="line"># Set the value of this setting to true to suppress all logging output.</span><br><span class="line">#logging.silent: false</span><br><span class="line"></span><br><span class="line"># Set the value of this setting to true to suppress all logging output other than error messages.</span><br><span class="line">#logging.quiet: false</span><br><span class="line"></span><br><span class="line"># Set the value of this setting to true to log all events, including system usage information</span><br><span class="line"># and all requests.</span><br><span class="line">#logging.verbose: false</span><br><span class="line"></span><br><span class="line"># Set the interval in milliseconds to sample system and process performance</span><br><span class="line"># metrics. Minimum is 100ms. Defaults to 5000.</span><br><span class="line">#ops.interval: 5000</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"># Settings file in YAML</span><br><span class="line">#</span><br><span class="line"># Settings can be specified either in hierarchical form, e.g.:</span><br><span class="line">#</span><br><span class="line">#   pipeline:</span><br><span class="line">#     batch:</span><br><span class="line">#       size: 125</span><br><span class="line">#       delay: 5</span><br><span class="line">#</span><br><span class="line"># Or as flat keys:</span><br><span class="line">#</span><br><span class="line">#   pipeline.batch.size: 125</span><br><span class="line">#   pipeline.batch.delay: 5</span><br><span class="line">#</span><br><span class="line"># ------------  Node identity ------------</span><br><span class="line">#</span><br><span class="line"># Use a descriptive name for the node:</span><br><span class="line">#</span><br><span class="line"># node.name: test</span><br><span class="line">#</span><br><span class="line"># If omitted the node name will default to the machine&apos;s host name</span><br><span class="line">#</span><br><span class="line"># ------------ Data path ------------------</span><br><span class="line">#</span><br><span class="line"># Which directory should be used by logstash and its plugins</span><br><span class="line"># for any persistent needs. Defaults to LOGSTASH_HOME/data</span><br><span class="line">#</span><br><span class="line"># path.data:</span><br><span class="line">#</span><br><span class="line"># ------------ Pipeline Settings --------------</span><br><span class="line">#</span><br><span class="line"># The ID of the pipeline.</span><br><span class="line">#</span><br><span class="line"># pipeline.id: main</span><br><span class="line">#</span><br><span class="line"># Set the number of workers that will, in parallel, execute the filters+outputs</span><br><span class="line"># stage of the pipeline.</span><br><span class="line">#</span><br><span class="line"># This defaults to the number of the host&apos;s CPU cores.</span><br><span class="line">#</span><br><span class="line"># pipeline.workers: 2</span><br><span class="line">#</span><br><span class="line"># How many events to retrieve from inputs before sending to filters+workers</span><br><span class="line">#</span><br><span class="line"># pipeline.batch.size: 125</span><br><span class="line">#</span><br><span class="line"># How long to wait in milliseconds while polling for the next event</span><br><span class="line"># before dispatching an undersized batch to filters+outputs</span><br><span class="line">#</span><br><span class="line"># pipeline.batch.delay: 50</span><br><span class="line">#</span><br><span class="line"># Force Logstash to exit during shutdown even if there are still inflight</span><br><span class="line"># events in memory. By default, logstash will refuse to quit until all</span><br><span class="line"># received events have been pushed to the outputs.</span><br><span class="line">#</span><br><span class="line"># WARNING: enabling this can lead to data loss during shutdown</span><br><span class="line">#</span><br><span class="line"># pipeline.unsafe_shutdown: false</span><br><span class="line">#</span><br><span class="line"># ------------ Pipeline Configuration Settings --------------</span><br><span class="line">#</span><br><span class="line"># Where to fetch the pipeline configuration for the main pipeline</span><br><span class="line">#</span><br><span class="line"># path.config:</span><br><span class="line">#</span><br><span class="line"># Pipeline configuration string for the main pipeline</span><br><span class="line">#</span><br><span class="line"># config.string:</span><br><span class="line">#</span><br><span class="line"># At startup, test if the configuration is valid and exit (dry run)</span><br><span class="line">#</span><br><span class="line"># config.test_and_exit: false</span><br><span class="line">#</span><br><span class="line"># Periodically check if the configuration has changed and reload the pipeline</span><br><span class="line"># This can also be triggered manually through the SIGHUP signal</span><br><span class="line">#</span><br><span class="line"># config.reload.automatic: false</span><br><span class="line">#</span><br><span class="line"># How often to check if the pipeline configuration has changed (in seconds)</span><br><span class="line">#</span><br><span class="line"># config.reload.interval: 3s</span><br><span class="line">#</span><br><span class="line"># Show fully compiled configuration as debug log message</span><br><span class="line"># NOTE: --log.level must be &apos;debug&apos;</span><br><span class="line">#</span><br><span class="line"># config.debug: false</span><br><span class="line">#</span><br><span class="line"># When enabled, process escaped characters such as \n and \&quot; in strings in the</span><br><span class="line"># pipeline configuration files.</span><br><span class="line">#</span><br><span class="line"># config.support_escapes: false</span><br><span class="line">#</span><br><span class="line"># ------------ Module Settings ---------------</span><br><span class="line"># Define modules here.  Modules definitions must be defined as an array.</span><br><span class="line"># The simple way to see this is to prepend each `name` with a `-`, and keep</span><br><span class="line"># all associated variables under the `name` they are associated with, and</span><br><span class="line"># above the next, like this:</span><br><span class="line">#</span><br><span class="line"># modules:</span><br><span class="line">#   - name: MODULE_NAME</span><br><span class="line">#     var.PLUGINTYPE1.PLUGINNAME1.KEY1: VALUE</span><br><span class="line">#     var.PLUGINTYPE1.PLUGINNAME1.KEY2: VALUE</span><br><span class="line">#     var.PLUGINTYPE2.PLUGINNAME1.KEY1: VALUE</span><br><span class="line">#     var.PLUGINTYPE3.PLUGINNAME3.KEY1: VALUE</span><br><span class="line">#</span><br><span class="line"># Module variable names must be in the format of</span><br><span class="line">#</span><br><span class="line"># var.PLUGIN_TYPE.PLUGIN_NAME.KEY</span><br><span class="line">#</span><br><span class="line"># modules:</span><br><span class="line">#</span><br><span class="line"># ------------ Cloud Settings ---------------</span><br><span class="line"># Define Elastic Cloud settings here.</span><br><span class="line"># Format of cloud.id is a base64 value e.g. dXMtZWFzdC0xLmF3cy5mb3VuZC5pbyRub3RhcmVhbCRpZGVudGlmaWVy</span><br><span class="line"># and it may have an label prefix e.g. staging:dXMtZ...</span><br><span class="line"># This will overwrite &apos;var.elasticsearch.hosts&apos; and &apos;var.kibana.host&apos;</span><br><span class="line"># cloud.id: &lt;identifier&gt;</span><br><span class="line">#</span><br><span class="line"># Format of cloud.auth is: &lt;user&gt;:&lt;pass&gt;</span><br><span class="line"># This is optional</span><br><span class="line"># If supplied this will overwrite &apos;var.elasticsearch.username&apos; and &apos;var.elasticsearch.password&apos;</span><br><span class="line"># If supplied this will overwrite &apos;var.kibana.username&apos; and &apos;var.kibana.password&apos;</span><br><span class="line"># cloud.auth: elastic:&lt;password&gt;</span><br><span class="line">#</span><br><span class="line"># ------------ Queuing Settings --------------</span><br><span class="line">#</span><br><span class="line"># Internal queuing model, &quot;memory&quot; for legacy in-memory based queuing and</span><br><span class="line"># &quot;persisted&quot; for disk-based acked queueing. Defaults is memory</span><br><span class="line">#</span><br><span class="line"># queue.type: memory</span><br><span class="line">#</span><br><span class="line"># If using queue.type: persisted, the directory path where the data files will be stored.</span><br><span class="line"># Default is path.data/queue</span><br><span class="line">#</span><br><span class="line"># path.queue:</span><br><span class="line">#</span><br><span class="line"># If using queue.type: persisted, the page data files size. The queue data consists of</span><br><span class="line"># append-only data files separated into pages. Default is 64mb</span><br><span class="line">#</span><br><span class="line"># queue.page_capacity: 64mb</span><br><span class="line">#</span><br><span class="line"># If using queue.type: persisted, the maximum number of unread events in the queue.</span><br><span class="line"># Default is 0 (unlimited)</span><br><span class="line">#</span><br><span class="line"># queue.max_events: 0</span><br><span class="line">#</span><br><span class="line"># If using queue.type: persisted, the total capacity of the queue in number of bytes.</span><br><span class="line"># If you would like more unacked events to be buffered in Logstash, you can increase the</span><br><span class="line"># capacity using this setting. Please make sure your disk drive has capacity greater than</span><br><span class="line"># the size specified here. If both max_bytes and max_events are specified, Logstash will pick</span><br><span class="line"># whichever criteria is reached first</span><br><span class="line"># Default is 1024mb or 1gb</span><br><span class="line">#</span><br><span class="line"># queue.max_bytes: 1024mb</span><br><span class="line">#</span><br><span class="line"># If using queue.type: persisted, the maximum number of acked events before forcing a checkpoint</span><br><span class="line"># Default is 1024, 0 for unlimited</span><br><span class="line">#</span><br><span class="line"># queue.checkpoint.acks: 1024</span><br><span class="line">#</span><br><span class="line"># If using queue.type: persisted, the maximum number of written events before forcing a checkpoint</span><br><span class="line"># Default is 1024, 0 for unlimited</span><br><span class="line">#</span><br><span class="line"># queue.checkpoint.writes: 1024</span><br><span class="line">#</span><br><span class="line"># If using queue.type: persisted, the interval in milliseconds when a checkpoint is forced on the head page</span><br><span class="line"># Default is 1000, 0 for no periodic checkpoint.</span><br><span class="line">#</span><br><span class="line"># queue.checkpoint.interval: 1000</span><br><span class="line">#</span><br><span class="line"># ------------ Dead-Letter Queue Settings --------------</span><br><span class="line"># Flag to turn on dead-letter queue.</span><br><span class="line">#</span><br><span class="line"># dead_letter_queue.enable: false</span><br><span class="line"></span><br><span class="line"># If using dead_letter_queue.enable: true, the maximum size of each dead letter queue. Entries</span><br><span class="line"># will be dropped if they would increase the size of the dead letter queue beyond this setting.</span><br><span class="line"># Default is 1024mb</span><br><span class="line"># dead_letter_queue.max_bytes: 1024mb</span><br><span class="line"></span><br><span class="line"># If using dead_letter_queue.enable: true, the directory path where the data files will be stored.</span><br><span class="line"># Default is path.data/dead_letter_queue</span><br><span class="line">#</span><br><span class="line"># path.dead_letter_queue:</span><br><span class="line">#</span><br><span class="line"># ------------ Metrics Settings --------------</span><br><span class="line">#</span><br><span class="line"># Bind address for the metrics REST endpoint</span><br><span class="line">#</span><br><span class="line"># http.host: &quot;127.0.0.1&quot;</span><br><span class="line">#</span><br><span class="line"># Bind port for the metrics REST endpoint, this option also accept a range</span><br><span class="line"># (9600-9700) and logstash will pick up the first available ports.</span><br><span class="line">#</span><br><span class="line"># http.port: 9600-9700</span><br><span class="line">#</span><br><span class="line"># ------------ Debugging Settings --------------</span><br><span class="line">#</span><br><span class="line"># Options for log.level:</span><br><span class="line">#   * fatal</span><br><span class="line">#   * error</span><br><span class="line">#   * warn</span><br><span class="line">#   * info (default)</span><br><span class="line">#   * debug</span><br><span class="line">#   * trace</span><br><span class="line">#</span><br><span class="line"># log.level: info</span><br><span class="line"># path.logs:</span><br><span class="line">#</span><br><span class="line"># ------------ Other Settings --------------</span><br><span class="line">#</span><br><span class="line"># Where to find custom plugins</span><br><span class="line"># path.plugins: []</span><br><span class="line">#</span><br><span class="line"># ------------ X-Pack Settings (not applicable for OSS build)--------------</span><br><span class="line">#</span><br><span class="line"># X-Pack Monitoring</span><br><span class="line"># https://www.elastic.co/guide/en/logstash/current/monitoring-logstash.html</span><br><span class="line">#xpack.monitoring.enabled: false</span><br><span class="line">#xpack.monitoring.elasticsearch.username: logstash_system</span><br><span class="line">#xpack.monitoring.elasticsearch.password: password</span><br><span class="line">#xpack.monitoring.elasticsearch.url: [&quot;https://es1:9200&quot;, &quot;https://es2:9200&quot;]</span><br><span class="line">#xpack.monitoring.elasticsearch.ssl.ca: [ &quot;/path/to/ca.crt&quot; ]</span><br><span class="line">#xpack.monitoring.elasticsearch.ssl.truststore.path: path/to/file</span><br><span class="line">#xpack.monitoring.elasticsearch.ssl.truststore.password: password</span><br><span class="line">#xpack.monitoring.elasticsearch.ssl.keystore.path: /path/to/file</span><br><span class="line">#xpack.monitoring.elasticsearch.ssl.keystore.password: password</span><br><span class="line">#xpack.monitoring.elasticsearch.ssl.verification_mode: certificate</span><br><span class="line">#xpack.monitoring.elasticsearch.sniffing: false</span><br><span class="line">#xpack.monitoring.collection.interval: 10s</span><br><span class="line">#xpack.monitoring.collection.pipeline.details.enabled: true</span><br><span class="line">#</span><br><span class="line"># X-Pack Management</span><br><span class="line"># https://www.elastic.co/guide/en/logstash/current/logstash-centralized-pipeline-management.html</span><br><span class="line">#xpack.management.enabled: false</span><br><span class="line">#xpack.management.pipeline.id: [&quot;main&quot;, &quot;apache_logs&quot;]</span><br><span class="line">#xpack.management.elasticsearch.username: logstash_admin_user</span><br><span class="line">#xpack.management.elasticsearch.password: password</span><br><span class="line">#xpack.management.elasticsearch.url: [&quot;https://es1:9200&quot;, &quot;https://es2:9200&quot;]</span><br><span class="line">#xpack.management.elasticsearch.ssl.ca: [ &quot;/path/to/ca.crt&quot; ]</span><br><span class="line">#xpack.management.elasticsearch.ssl.truststore.path: /path/to/file</span><br><span class="line">#xpack.management.elasticsearch.ssl.truststore.password: password</span><br><span class="line">#xpack.management.elasticsearch.ssl.keystore.path: /path/to/file</span><br><span class="line">#xpack.management.elasticsearch.ssl.keystore.password: password</span><br><span class="line">#xpack.management.elasticsearch.sniffing: false</span><br><span class="line">#xpack.management.logstash.poll_interval: 5s</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8001:5601 -p 8002:9200 -p 8003:9300 -p 8004:5044 \</span><br><span class="line">-v /data/elk/logstash/conf.d:/etc/logstash/conf.d \</span><br><span class="line">-v /data/elk/kibana/config/kibana.yml:/opt/kibana/config/kibana.yml \</span><br><span class="line">-v /data/elk/logstash/config/logstash.yml:/opt/logstash/config/logstash.yml \</span><br><span class="line">-v /data/elk/elasticsearch/config/elasticsearch.yml:/opt/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /data/elk/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v /data/elk/elasticsearch/log/:/var/lib/elasticsearch \</span><br><span class="line">-v /data/elk/kibana/run_log/:/var/log/kibana/ \</span><br><span class="line">-v /data/elk/logstash/run_log/:/var/log/logstash/ \</span><br><span class="line">-v /data/elk/elasticsearch/run_log/:/var/log/elasticsearch/   -it --name elk sebp/elk</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> ELK </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ELK </tag>
            
            <tag> Kibana </tag>
            
            <tag> ElasticSsearch </tag>
            
            <tag> LogStash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ELK: 使用 Docker 搭建 ELK 环境]]></title>
      <url>/2018/07/20/ELK-%E4%BD%BF%E7%94%A8-Docker-%E6%90%AD%E5%BB%BA-ELK-%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p>​    这里使用 Docker 直接搭建 ELK 环境, 因为 Docker 有第三方提供了 elk 的包, 减少了配置量.当然也可以用 ELK提供的官方 Docker 包或者直接安装, 但是因为工作需要就那么折腾了.</p>
<a id="more"></a>
<h1 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h1><ul>
<li><p>Docker 官方安装教程</p>
<p><a href="https://docs.docker.com/v17.09/engine/installation/linux/docker-ce/centos/#prerequisites" target="_blank" rel="noopener">https://docs.docker.com/v17.09/engine/installation/linux/docker-ce/centos/#prerequisites</a></p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 更新</span><br><span class="line">yum update</span><br><span class="line"><span class="meta">#</span> 删除旧版本避免冲突</span><br><span class="line">sudo yum remove docker \</span><br><span class="line">  docker-common \</span><br><span class="line">  docker-selinux \</span><br><span class="line">  docker-engine</span><br><span class="line"><span class="meta">#</span> 安装依赖</span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line"><span class="meta">#</span> 安装 Docker 的 yum 源</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">  --add-repo \</span><br><span class="line">  https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span> 安装 Docker</span><br><span class="line">sudo yum install docker-ce</span><br><span class="line"><span class="meta">#</span> 开启 Docker</span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="meta">#</span> 开启 Docker</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>
<p> 这样 Docker 就安装好了, 一般不会遇到什么问题.需要注意的是这是 CentOS 的安装顺序, 其他系统参考官方教程.</p>
<h1 id="ELK-安装"><a href="#ELK-安装" class="headerlink" title="ELK 安装"></a>ELK 安装</h1><ul>
<li><p>ELK Docker 文档</p>
<p><a href="http://elk-docker.readthedocs.io/" target="_blank" rel="noopener">http://elk-docker.readthedocs.io/</a></p>
</li>
</ul>
<p>安装 ELK Docker 镜像</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker pull sebp/elk</span><br><span class="line">docker run -p 5001:5601 -p 9200:9200 -p 5044:5044 -p 9300:9300 \</span><br><span class="line">  -v /data/elk/conf.d:/etc/logstash/conf.d -it --name elk sebp/elk</span><br><span class="line"><span class="meta">#</span> 这个包直接 run 就好了, 需要注意的是端口要映射出来, 如果需要修改配置就要映射配置文件.</span><br><span class="line"><span class="meta">#</span> 配置文件文件夹在文档中能找到, 相关配置也在里面.</span><br><span class="line"><span class="meta">#</span> 5601 -&gt; Kibana</span><br><span class="line"><span class="meta">#</span> 5044 -&gt; Logstash</span><br><span class="line"><span class="meta">#</span> 9200, 9300 -&gt; Elasticsearch</span><br></pre></td></tr></table></figure>
<p>在文档里面提到一个先决条件, 就是 max_map_count 要大于 262144.</p>
<ul>
<li><p>Linux 设置 max_map_count</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看设置的 max_map_count 是多少</span><br><span class="line">sysctl vm.max_map_count</span><br><span class="line"><span class="meta">#</span> 设置 max_map_count 大于300000</span><br><span class="line">sysctl -w vm.max_map_count=300000</span><br></pre></td></tr></table></figure>
<p>注意, 必须在主机上更改限制; 不能在容器内更改.</p>
</li>
<li>Docker for Mac 设置 max_map_count<br>在启动容器时设置环境变量 -e MAX_MAP_COUNT=300000<br>如果没有问题就已经装好了, 可以通过 Kibana 和 Elasticsearch:9200 连接查看是否安装完成.</li>
</ul>
]]></content>
      
        <categories>
            
            <category> ELK </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ELK </tag>
            
            <tag> Elasticsearch </tag>
            
            <tag> Logstash </tag>
            
            <tag> Kibana </tag>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[流畅的Python]]></title>
      <url>/2018/05/05/%E6%B5%81%E7%95%85%E7%9A%84python/</url>
      <content type="html"><![CDATA[<p>流畅的python阅读笔记，流畅的python主要是讲了python的进阶特性。<br><a id="more"></a></p>
<h1 id="第一章-Python数据模型"><a href="#第一章-Python数据模型" class="headerlink" title="第一章 Python数据模型"></a>第一章 Python数据模型</h1><p>  在 Python 中使用双下划线开头，双下划线结尾的方法就是 Python 的特殊方法。Python 会在碰到特殊句法的时候，会使用特殊方法去执行一些对象操作。<br>这些特殊方法能让对象支持这些操作： 迭代， 集合类， 属性访问， 运算符重载， 函数和方法的调用， 对象的创建和销毁， 字符串表示形式和格式化， 管理<br>上下文。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python Web开发测试驱动方法 笔记]]></title>
      <url>/2018/02/26/Python-Web%E5%BC%80%E5%8F%91%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E6%96%B9%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>Python Web开发测试驱动方法的笔记<br>django version: 1.11.7<br>Python version: 3.6.2<br><a id="more"></a></p>
<h1 id="第一部分-第-1-6章-基础知识"><a href="#第一部分-第-1-6章-基础知识" class="headerlink" title="第一部分 (第 1~6章 ): 基础知识"></a>第一部分 (第 1~6章 ): 基础知识</h1><h2 id="第-1-章-功能测试协助安装Django"><a href="#第-1-章-功能测试协助安装Django" class="headerlink" title="第 1 章 功能测试协助安装Django"></a>第 1 章 功能测试协助安装Django</h2><p>测试山羊: “先测试,先测试,先测试”(重要的事说三遍)<br>测试山羊: “没有测试什么也别做”<br>这一章主要讲的是编写一个简单的测试查看Django是否安装正确,没有什么问题.</p>
<h2 id="第-2-章-使用unittest模块扩展功能测试"><a href="#第-2-章-使用unittest模块扩展功能测试" class="headerlink" title="第 2 章 使用unittest模块扩展功能测试"></a>第 2 章 使用unittest模块扩展功能测试</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>书中有一部分说到了注释.注释是有用的, 可以添加上下文,说明代码的目的,但是简单而重复的注释<br>是毫无意义的.而且有一定风险,如果更新了代码后没有修改注释,会误导别人.例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 把wibble的值增加 1</span><br><span class="line">wibble += 1</span><br></pre></td></tr></table></figure></p>
<h3 id="unittest模块"><a href="#unittest模块" class="headerlink" title="unittest模块"></a>unittest模块</h3><ol>
<li>以test_开头的方法都是测试方法</li>
<li>测试方法的名称应该有意义</li>
<li>setUp和tearDown在该测试类的各个测试方法运行前和运行后执行</li>
<li>预期失败,应该预期测试方法的失败和失败方式</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class XXTest(unittest.TestCase):</span><br><span class="line">    def setUp(self):</span><br><span class="line">        &apos;&apos;&apos;测试开始前执行&apos;&apos;&apos;</span><br><span class="line">        self.browser = webdriver.Chrome() # 设置浏览器驱动</span><br><span class="line">        self.browser.implicitly_wait(3) # 隐式等待,在页面加载的时候让Selenium先等待</span><br><span class="line"></span><br><span class="line">    def tearDown(self):</span><br><span class="line">        &apos;&apos;&apos;测试结束后执行&apos;&apos;&apos;</span><br><span class="line">        self.browser.quit() # 设置退出浏览器</span><br><span class="line"></span><br><span class="line">    def testxxx(self):</span><br><span class="line">        self.asserIn(&apos;XX&apos;, self.browser.title) # 测试浏览器标题是不是包含XX</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;main&apos;:</span><br><span class="line">    # 启动unittest测试程序,禁止抛出ResourceWarning异常</span><br><span class="line">    unittest.main(warnings=&apos;ignore&apos;)</span><br></pre></td></tr></table></figure>
<h2 id="第-3-章-使用单元测试测试简单的首页"><a href="#第-3-章-使用单元测试测试简单的首页" class="headerlink" title="第 3 章 使用单元测试测试简单的首页"></a>第 3 章 使用单元测试测试简单的首页</h2><h3 id="单元测试和功能测试的区别"><a href="#单元测试和功能测试的区别" class="headerlink" title="单元测试和功能测试的区别"></a>单元测试和功能测试的区别</h3><p>单元测试: 站在程序员的角度从内部测试应用<br>功能测试: 站在用户的角度从外部测试应用</p>
<h4 id="单元测试和功能测试的工作流程"><a href="#单元测试和功能测试的工作流程" class="headerlink" title="单元测试和功能测试的工作流程"></a>单元测试和功能测试的工作流程</h4><ol>
<li>先写功能测试, 从用户的角度描述应用的新功能</li>
<li>功能测试失败后,想办法编写代码让它通过(至少通过当前失败).使用一个或多个单元测试定义希望代<br>码实现的效果,尽量覆盖每一行代码(至少一个)</li>
<li>单元测试失败后,写最少的应用代码让单元测试通过.直到功能测试有进展.</li>
<li>再次运行功能测试,然后根据新的测试结果编写新的单元测试和代码.</li>
</ol>
<h3 id="单元测试代码"><a href="#单元测试代码" class="headerlink" title="单元测试代码"></a>单元测试代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># tests.py</span><br><span class="line">class HomePageTest(TestCase):</span><br><span class="line">    def test_root_page_resolve(self):</span><br><span class="line">        &quot;&quot;&quot;路径解析测试&quot;&quot;&quot;</span><br><span class="line">        found = resolve(&apos;/&apos;)</span><br><span class="line">        self.assertEqual(found.func, home_page)</span><br><span class="line"></span><br><span class="line">    def test_home_page_returns_html(self):</span><br><span class="line">        &quot;&quot;&quot;页面HTML解析&quot;&quot;&quot;</span><br><span class="line">        request = HttpRequest()</span><br><span class="line">        response = home_page(request)</span><br><span class="line">        self.assertTrue(response.content.startswith(b&apos;&lt;html&gt;&apos;))</span><br><span class="line">        self.assertIn(b&apos;&lt;title&gt;To-Do lists&lt;/title&gt;&apos;, response.content)</span><br><span class="line">        self.assertTrue(response.content.endswith(b&apos;&lt;/html&gt;&apos;))</span><br><span class="line"></span><br><span class="line"># lists/views.py</span><br><span class="line">def home_page(request):</span><br><span class="line">    return HttpResponse(&apos;&lt;html&gt;&lt;title&gt;To-Do lists&lt;/title&gt;&lt;/html&gt;)</span><br><span class="line"></span><br><span class="line"># superlists/urls.py</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&apos;^admin/&apos;, admin.site.urls),</span><br><span class="line">    url(r&apos;^$&apos;, view=views.home_page, name=&apos;home_page&apos;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="单元测试时的问题"><a href="#单元测试时的问题" class="headerlink" title="单元测试时的问题"></a>单元测试时的问题</h3><p>在django 1.11.7中resolve的导入是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import resolve</span><br></pre></td></tr></table></figure></p>
<p>resolve()中的path路径是在urls的路径加根目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">found = resolve(&apos;/lists/&apos;)</span><br><span class="line"></span><br><span class="line">urls:</span><br><span class="line">url(r&apos;^lists/&apos;, view=views.home_page, name=&apos;home_page&apos;),</span><br></pre></td></tr></table></figure></p>
<h2 id="第-4-章-编写这些测试有什么用"><a href="#第-4-章-编写这些测试有什么用" class="headerlink" title="第 4 章 编写这些测试有什么用"></a>第 4 章 编写这些测试有什么用</h2><ol>
<li>测试有点多了?是不是太琐细了?<br>我们并不是大神,也不是大牛,我们没办法避免错误,哪怕是大神可能也会出现简单的错误.TDD可以记录<br>我们编码的进程,让我们不会反复的犯同一个错误.测试可能会很简单,但是有占位作用,当函数变复杂后就<br>可能没那么容易测试了.在学习新框架的时候TDD也能帮助学习,排除错误.</li>
</ol>
<img src="/2018/02/26/Python-Web开发测试驱动方法笔记/单元测试TDD流程.jpg" title="单元测试TDD流程">
<img src="/2018/02/26/Python-Web开发测试驱动方法笔记/功能测试TDD流程.jpg" title="功能测试TDD流程">
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def test_home_page_returns_html(self):</span><br><span class="line">    &quot;&quot;&quot;页面HTML解析&quot;&quot;&quot;</span><br><span class="line">    request = HttpRequest()</span><br><span class="line">    response = home_page(request)</span><br><span class="line">    expected_html = render_to_string(&apos;home.html&apos;)</span><br><span class="line">    self.assertEqual(response.content.decode(), expected_html)</span><br></pre></td></tr></table></figure>
<h2 id="第-5-章-保存用户输入"><a href="#第-5-章-保存用户输入" class="headerlink" title="第 5 章 保存用户输入"></a>第 5 章 保存用户输入</h2><h1 id="单元测试规则"><a href="#单元测试规则" class="headerlink" title="单元测试规则"></a>单元测试规则</h1><ol>
<li>不测试常量</li>
</ol>
<h1 id="assert语句"><a href="#assert语句" class="headerlink" title="assert语句"></a>assert语句</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assertIn(xx, yy) yy中有没有xx</span><br><span class="line">assertEqual(xx,yy) xx和yy是不是一样</span><br><span class="line">assertTrue(xx) xx结果是不是True</span><br></pre></td></tr></table></figure>
<h1 id="find-element-by-语句"><a href="#find-element-by-语句" class="headerlink" title="find_element_by 语句"></a>find_element_by 语句</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_id(xx)</span><br><span class="line">find_element_by_tag_name(xx)</span><br><span class="line"></span><br><span class="line">find_elements_by_tag_name(xx)</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Django </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
            <tag> TDD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在aws 创建git 仓库]]></title>
      <url>/2018/02/16/%E5%9C%A8aws-%E5%88%9B%E5%BB%BAgit-%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>在aws上创建git仓库<br><a id="more"></a></p>
<h1 id="在本地创建ssh公钥和私钥"><a href="#在本地创建ssh公钥和私钥" class="headerlink" title="在本地创建ssh公钥和私钥"></a>在本地创建ssh公钥和私钥</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx&quot;</span><br></pre></td></tr></table></figure>
<h1 id="在aws创建authortized-keys文件存放刚才生成的公钥。"><a href="#在aws创建authortized-keys文件存放刚才生成的公钥。" class="headerlink" title="在aws创建authortized_keys文件存放刚才生成的公钥。"></a>在aws创建authortized_keys文件存放刚才生成的公钥。</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir .ssh &amp;&amp; cd .ssh</span><br><span class="line">touch authorized_keys</span><br><span class="line">vi authorized_keys</span><br></pre></td></tr></table></figure>
<h1 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir 仓库名称 &amp;&amp; cd 仓库名称</span><br><span class="line">git init --bare</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> aws </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 存储过程实例]]></title>
      <url>/2018/02/16/MySQL-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>MySQL 存储过程的一些例子,添加了一些注释<br><a id="more"></a></p>
<h1 id="1-存储过程"><a href="#1-存储过程" class="headerlink" title="1. 存储过程"></a>1. 存储过程</h1><h2 id="存储过程1"><a href="#存储过程1" class="headerlink" title="存储过程1"></a>存储过程1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">CREATE  PROCEDURE `SP_eco_stat`(IN report_type VARCHAR(100), IN start_datetime DATETIME, IN end_datetime DATETIME)      # 存储过程名称（传入参数）</span><br><span class="line">    COMMENT &apos;计算经济系统数据&apos;      # 备注信息</span><br><span class="line">BEGIN       # 存储过程开始</span><br><span class="line"></span><br><span class="line">    DECLARE `from` VARCHAR(100);        #变量声明，要在前面</span><br><span class="line">    DECLARE `detail` VARCHAR(100);</span><br><span class="line">    DECLARE `country` VARCHAR(100);</span><br><span class="line">    DECLARE `change` VARCHAR(100);</span><br><span class="line">    DECLARE `count` VARCHAR(100);</span><br><span class="line">    DECLARE `user` VARCHAR(100);</span><br><span class="line">    DECLARE `stop_flag` INT DEFAULT 0;       # DEFAULT设置默认值，没有则为null</span><br><span class="line">    DECLARE `date` DATE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    DECLARE _Cursor CURSOR FOR SELECT           # 声明光标   XX 光标名 XX</span><br><span class="line">                                 a.`from`                AS `from`,</span><br><span class="line">                                 a.detail                AS `detail`,</span><br><span class="line">                                 a.country               AS `country`,</span><br><span class="line">                                 SUM(a.`change`)         AS `change`,</span><br><span class="line">                                 SUM(1)                  AS `count`,</span><br><span class="line">                                 count(DISTINCT (a.uid)) AS `user`</span><br><span class="line">                               FROM credits a</span><br><span class="line">                               WHERE</span><br><span class="line">                                 a.`time` BETWEEN start_datetime AND end_datetime AND a.`change` &gt; 0</span><br><span class="line">                               GROUP BY a.`from`, a.`change`, a.country;</span><br><span class="line"></span><br><span class="line">    DECLARE CONTINUE HANDLER FOR SQLSTATE &apos;02000&apos; SET stop_flag = 1;        # 声明停止时stop_flag=1</span><br><span class="line"></span><br><span class="line">    SET `date` = CURDATE() + INTERVAL -(1) DAY;     # 变量赋值</span><br><span class="line"></span><br><span class="line">    # 调试开关</span><br><span class="line">    SET @__logCallDebug = 1;</span><br><span class="line"></span><br><span class="line">    CALL SP_LogCall(&apos;SP_eco_stat&apos;,      # 调用存储过程</span><br><span class="line">                    CONCAT_WS(&apos;,&apos;,</span><br><span class="line">                              QUOTE(report_type),</span><br><span class="line">                              QUOTE(start_datetime),</span><br><span class="line">                              QUOTE(end_datetime)),</span><br><span class="line">                    &apos;begin...&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    OPEN _Cursor;       #打开光标</span><br><span class="line"></span><br><span class="line">    FETCH _Cursor INTO `from`, `detail`, `country`, `change`, `count`, `user`;      # 调用光标并赋值</span><br><span class="line"></span><br><span class="line">    WHILE `stop_flag`&lt;&gt;1 DO     # while循环</span><br><span class="line"></span><br><span class="line">            IF `country` IS NULL        # if 判断</span><br><span class="line">      THEN SET `country` = &apos;&apos;;</span><br><span class="line">      END IF;</span><br><span class="line">            IF `change` IS NULL</span><br><span class="line">      THEN SET `change` = &apos;&apos;;</span><br><span class="line">      END IF;</span><br><span class="line">            IF `detail` IS NULL</span><br><span class="line">      THEN SET `detail` = &apos;&apos;;</span><br><span class="line">      END IF;</span><br><span class="line">            IF `from` IS NULL</span><br><span class="line">      THEN SET `from` = &apos;&apos;;</span><br><span class="line">      END IF;</span><br><span class="line">            IF `count` IS NULL</span><br><span class="line">      THEN SET `count` = &apos;&apos;;</span><br><span class="line">      END IF;</span><br><span class="line"></span><br><span class="line">      REPLACE INTO day_amounts(type1, type2, type3, type4, type5, DATE, amount) VALUES (report_type, `from`, `detail`, `country`, &apos;change&apos;, `date`, `change`), (report_type, `from`, `detail`, `country`, &apos;count&apos;, `date`, `count`), (report_type, `from`, `detail`, `country`, &apos;user&apos;, `date`, `user`);        # INSERT INTO的强化版，如果有存在相同的主键时对该行进行更新</span><br><span class="line"></span><br><span class="line">      FETCH _Cursor INTO `from`, `detail`, `country`, `change`, `count`, `user`;</span><br><span class="line"></span><br><span class="line">    END WHILE;</span><br><span class="line"></span><br><span class="line">CLOSE _Cursor;      # 关闭光标</span><br><span class="line"></span><br><span class="line">CALL SP_LogCallDebug(&apos;end.&apos;);</span><br><span class="line"></span><br><span class="line">END     # 存储过程结束</span><br></pre></td></tr></table></figure>
<h2 id="存储过程2"><a href="#存储过程2" class="headerlink" title="存储过程2"></a>存储过程2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE SP_day_n_retention(IN calcdate_offset INT)</span><br><span class="line">  COMMENT &apos;日留存计算&apos;</span><br><span class="line">  BEGIN</span><br><span class="line">    DECLARE yesterday DATE;</span><br><span class="line"></span><br><span class="line">    # 调试开关</span><br><span class="line">    SET @__logCallDebug = 1;</span><br><span class="line"></span><br><span class="line">    CALL SP_LogCall(&apos;SP_day_n_retention&apos;,</span><br><span class="line">                    CONCAT_WS(&apos;,&apos;,</span><br><span class="line">                              calcdate_offset),</span><br><span class="line">                    &apos;begin...&apos;);</span><br><span class="line"></span><br><span class="line">    # day0安装</span><br><span class="line">    CALL SP_LogCallDebug(&apos;day0...&apos;);</span><br><span class="line">    SET yesterday = adddate(date(NOW()), INTERVAL calcdate_offset DAY); # 获取当前【输入数字】天前的时间 date(NOW()) 现在时间 adddate 【DATE_ADD()的同义词】 获取【输入数字】天前的时间</span><br><span class="line">    # 安装量(去重)</span><br><span class="line">    SET @_install_user_count = (</span><br><span class="line">      SELECT amount</span><br><span class="line">      FROM day_amounts</span><br><span class="line">      WHERE type1 = &apos;user&apos; AND type3 = &apos;new&apos; AND</span><br><span class="line">            date BETWEEN CONCAT(yesterday, &apos; 00:00:00&apos;) AND CONCAT(yesterday, &apos; 23:59:59&apos;) # BETWEEN 多少和多少之间 CONCAT 连接字符串</span><br><span class="line">    );</span><br><span class="line">    # 插入或者更新day0</span><br><span class="line">    REPLACE INTO day_amounts</span><br><span class="line">    (</span><br><span class="line">      type1,</span><br><span class="line">      type2,</span><br><span class="line">      type3,</span><br><span class="line">      type4,</span><br><span class="line">      type5,</span><br><span class="line">      date,</span><br><span class="line">      amount</span><br><span class="line">    )</span><br><span class="line">    VALUES</span><br><span class="line">      (</span><br><span class="line">        &apos;user&apos;,</span><br><span class="line">        &apos; &apos;,</span><br><span class="line">        &apos;retention&apos;,</span><br><span class="line">        &apos; &apos;,</span><br><span class="line">        &apos;day0&apos;,</span><br><span class="line">        yesterday,</span><br><span class="line">        @_install_user_count</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    IF calcdate_offset &lt; 0 # 判断【输入数字】是否小于0</span><br><span class="line">    THEN</span><br><span class="line">      BEGIN</span><br><span class="line">        # exec执行错误</span><br><span class="line">        DECLARE errStr VARCHAR(10240);</span><br><span class="line"></span><br><span class="line">        DROP TABLE IF EXISTS tmp_uuid; # 如果临时表存在则删除</span><br><span class="line">        CREATE TEMPORARY TABLE tmp_uuid ( # 创建临时表，只在当前连接有效</span><br><span class="line">          uuid VARCHAR(64) NOT NULL,</span><br><span class="line">          PRIMARY KEY (uuid)</span><br><span class="line">        )</span><br><span class="line">          ENGINE = MYISAM # 数据库存储引擎 和InnoDB相比更注重性能但功能也较少</span><br><span class="line">          CHARACTER SET latin1</span><br><span class="line">          COLLATE latin1_general_ci;</span><br><span class="line"></span><br><span class="line">        INSERT tmp_uuid SELECT a.uid FROM users_active a</span><br><span class="line">                        WHERE a.act_time BETWEEN CONCAT(yesterday, &apos; 00:00:00&apos;) AND CONCAT(yesterday, &apos;  23:59:59&apos;);</span><br><span class="line"></span><br><span class="line">        SET @days = &apos;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,35,42,49,56,60,63,70,77,84,90&apos;;</span><br><span class="line">        WHILE CHAR_LENGTH(@days) &gt; 0 DO # while 循环</span><br><span class="line"></span><br><span class="line">          SET @dayN = SUBSTRING_INDEX(@days, &apos;,&apos;, 1); # 截取在第一个【,】之前的字符</span><br><span class="line"></span><br><span class="line">          CALL SP_LogCallDebug(concat(&apos;day&apos;, @dayN, &apos;...&apos;));</span><br><span class="line"></span><br><span class="line">          # 日期偏移(例如: day1 = 1, day2 = 2, ...)</span><br><span class="line">          SET @_dayOffset = (SELECT -CAST(@dayN AS SIGNED)); # CAST 获取一个类型的值并产生另一个类型的值 还有CONVERT(value, type)</span><br><span class="line">          # 在用户表和日志表里找N天前安装的用户的留存量</span><br><span class="line">          DROP TEMPORARY TABLE IF EXISTS day_n_retention;</span><br><span class="line">          SET @_execStr = CONCAT(</span><br><span class="line">              &apos;REPLACE INTO day_amounts(type1,type2,type3,type4,type5,date,amount) &apos;,</span><br><span class="line">              &apos;SELECT &quot;user&quot;, &quot;day&quot;, &quot;retention&quot;, &quot; &quot;, &quot;day&apos;, @dayN, &apos;&quot;, &quot;&apos;, adddate(yesterday, @`_dayOffset`),</span><br><span class="line">              &apos;&quot;, count(DISTINCT(u.uid))&apos;,</span><br><span class="line">              &apos;FROM users u, tmp_uuid a &apos;,</span><br><span class="line">              &apos;WHERE u.uid = a.uuid AND &apos;,</span><br><span class="line">              &apos;u.reg_time BETWEEN &quot;&apos;, adddate(yesterday, @`_dayOffset`), &apos; 00:00:00&quot; AND &quot;&apos;,</span><br><span class="line">              adddate(yesterday, @`_dayOffset`), &apos; 23:59:59&quot;&apos;</span><br><span class="line">          );</span><br><span class="line">          CALL SP_LogCallDebug(@_execStr);</span><br><span class="line">          CALL SP_Exec(@_execStr, errStr);</span><br><span class="line"></span><br><span class="line">          SET @days = RIGHT(@days, LENGTH(@days) - LENGTH(@dayN) - 1);</span><br><span class="line">        END WHILE;</span><br><span class="line">      END;</span><br><span class="line">      END IF ;</span><br><span class="line">      CALL SP_LogCallDebug(&apos;end.&apos;);</span><br><span class="line">    END;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 存储过程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SSL证书生成命令]]></title>
      <url>/2018/02/16/SSL%E8%AF%81%E4%B9%A6%E7%94%9F%E6%88%90%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>SSL证书的生成<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 生成一个RSA密钥</span><br><span class="line">$ openssl genrsa -des3 -out 33iq.key 1024</span><br><span class="line"></span><br><span class="line"># 拷贝一个不需要输入密码的密钥文件</span><br><span class="line">$ openssl rsa -in 33iq.key -out 33iq_nopass.key</span><br><span class="line"></span><br><span class="line"># 生成一个证书请求</span><br><span class="line">$ openssl req -new -key 33iq.key -out 33iq.csr</span><br><span class="line"></span><br><span class="line"># 自己签发证书</span><br><span class="line">$ openssl x509 -req -days 365 -in 33iq.csr -signkey 33iq.key -out 33iq.crt</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> commond </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SSL </tag>
            
            <tag> commond </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Django HTTPS配置]]></title>
      <url>/2018/02/16/Django-HTTPS%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>Django启动HTTPS服务的配置</p>
<a id="more"></a>
<p>在settings.py 中 添加以下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SECURE_PROXY_SSL_HEADER = (&apos;HTTP_X_FORWARDED_PROTO&apos;, &apos;https&apos;)</span><br><span class="line">SECURE_SSL_REDIRECT = True</span><br><span class="line">SESSION_COOKIE_SECURE = True</span><br><span class="line">CSRF_COOKIE_SECURE = True</span><br></pre></td></tr></table></figure></p>
<pre><code>- Django
</code></pre><hr>
<p>Django启动HTTPS服务的配置</p>
<!-- more -->
<p>在settings.py 中 添加以下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SECURE_PROXY_SSL_HEADER = (&apos;HTTP_X_FORWARDED_PROTO&apos;, &apos;https&apos;)</span><br><span class="line">SECURE_SSL_REDIRECT = True</span><br><span class="line">SESSION_COOKIE_SECURE = True</span><br><span class="line">CSRF_COOKIE_SECURE = True</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Django </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Django </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx-HTTP-配置]]></title>
      <url>/2018/02/16/Nginx-HTTP-%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>HTTP Nginx配置的记录,和一些解析注释</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">user LuGH LuGH;    # 指定nginx worker进程运行用户以及用户组</span><br><span class="line">worker_processes  2;    # 指定了nginx要开启的进程数</span><br><span class="line">error_log  /home/LuGH/logs/nginx_log/error.log crit;    # 用来定义全局错误日志文件</span><br><span class="line">pid        /usr/local/nginx/logs/nginx.pid;    # 用来指定进程id的存储文件位置</span><br><span class="line"></span><br><span class="line">events &#123;    # 用来指定nginx的工作模式及连接数上限</span><br><span class="line">    worker_connections  1024;    # 定义nginx每个进程的最大连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;    # 对配置文件所包含的文件设定</span><br><span class="line">    default_type  application/octet-stream;    # 为标准MIME映射未指定任何内容的文件指定默认的mime类型</span><br><span class="line">    sendfile        on;    # 用于开启高效文件传输模式</span><br><span class="line">    keepalive_timeout  65;    # 指定了客户端与服务器长连接的超时时间</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;    # 监听端口</span><br><span class="line">        server_name  localhost;    # 服务器名称</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://localhost:9000;    # 忽略代理</span><br><span class="line">                proxy_redirect default;    # 默认重定向</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> HTTP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx HTTPS 的简单配置]]></title>
      <url>/2018/02/16/Nginx-HTTPS-%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>Nginx 配置的记录，和一些解析注释。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">user LuGH LuGH;    # 主模块指令，指定nginx worker进程运行用户以及用户组</span><br><span class="line">worker_processes  2;    # 指定了nginx要开启的进程数</span><br><span class="line">error_log  /home/LuGH/logs/nginx_log/error.log crit;    # 用来定义全局错误日志文件</span><br><span class="line">pid        /usr/local/nginx/logs/nginx.pid;   # 用来指定进程id的存储文件位置</span><br><span class="line"></span><br><span class="line">events &#123;    # 用来指定nginx的工作模式及连接数上限</span><br><span class="line">    worker_connections  1024;    # 定义nginx每个进程的最大连接数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;    # 对配置文件所包含的文件设定</span><br><span class="line">    default_type  application/octet-stream;    # 为标准MIME映射未指定任何内容的文件指定默认的MIME类型。</span><br><span class="line">    sendfile        on;    # 用于开启高效文件传输模式</span><br><span class="line">    keepalive_timeout  65;    # 指定了客户端与服务器长连接的超时时间</span><br><span class="line">    upstream sserver &#123;    # 提供一个简单方法来实现在轮询和客户端IP之间的后端服务器负荷平衡</span><br><span class="line">        server 127.0.0.1:9000;    # 后端服务器ip</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen          443;    # 监听端口</span><br><span class="line">        server_name     local.com;    # 服务器名称</span><br><span class="line">        ssl             on;    # 开启ssl</span><br><span class="line">        ssl_certificate /home/LuGH/key/server.crt;    # ssl证书</span><br><span class="line">        ssl_certificate_key     /home/LuGH/key/server.key;    # ssl证书密匙</span><br><span class="line">        ssl_session_timeout     5m;    # 分配客户端可以重复使用存储在缓存中的会话参数的时间。</span><br><span class="line">        ssl_protocols   SSLv2 SSLv3 TLSv1;    # 指令启用指定的协议</span><br><span class="line">        ssl_ciphers     ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2+EXP;    # 指令描述允许的密码。密码以OpenSSL支持的格式分配</span><br><span class="line">        ssl_prefer_server_ciphers       on;    # 需要协议SSLv3和TLSv1服务器密码优于客户端的密码</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_set_header X-Forwarded-Proto https;    # 重新定义或添加字段传递给代理服务器的请求头 只允许https访问</span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    # 识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段是不是https</span><br><span class="line">                proxy_set_header Host $http_host;    # 设置Host</span><br><span class="line">                proxy_redirect off;    # 关闭重定向</span><br><span class="line">                proxy_pass http://sserver;    # 忽略代理</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
